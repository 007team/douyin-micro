// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: videoService.protos

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the protos package it is being compiled against.
// A compilation error at this line likely means your copy of the
// protos package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the protos package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for VideoService service

func NewVideoServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for VideoService service

type VideoService interface {
	Feed(ctx context.Context, in *VideoFeedRequest, opts ...client.CallOption) (*VideoFeedResponse, error)
	PublishAction(ctx context.Context, in *VideoPublishActionRequest, opts ...client.CallOption) (*VideoPublishActionResponse, error)
	PublishList(ctx context.Context, in *VideoPublishListRequest, opts ...client.CallOption) (*VideoPublishListResponse, error)
	FavoriteAction(ctx context.Context, in *VideoFavoriteActionRequest, opts ...client.CallOption) (*VideoFavoriteActionResponse, error)
	FavoriteList(ctx context.Context, in *VideoFavoriteListRequest, opts ...client.CallOption) (*VideoFavoriteListResponse, error)
}

type videoService struct {
	c    client.Client
	name string
}

func NewVideoService(name string, c client.Client) VideoService {
	return &videoService{
		c:    c,
		name: name,
	}
}

func (c *videoService) Feed(ctx context.Context, in *VideoFeedRequest, opts ...client.CallOption) (*VideoFeedResponse, error) {
	req := c.c.NewRequest(c.name, "VideoService.Feed", in)
	out := new(VideoFeedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoService) PublishAction(ctx context.Context, in *VideoPublishActionRequest, opts ...client.CallOption) (*VideoPublishActionResponse, error) {
	req := c.c.NewRequest(c.name, "VideoService.PublishAction", in)
	out := new(VideoPublishActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoService) PublishList(ctx context.Context, in *VideoPublishListRequest, opts ...client.CallOption) (*VideoPublishListResponse, error) {
	req := c.c.NewRequest(c.name, "VideoService.PublishList", in)
	out := new(VideoPublishListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoService) FavoriteAction(ctx context.Context, in *VideoFavoriteActionRequest, opts ...client.CallOption) (*VideoFavoriteActionResponse, error) {
	req := c.c.NewRequest(c.name, "VideoService.FavoriteAction", in)
	out := new(VideoFavoriteActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoService) FavoriteList(ctx context.Context, in *VideoFavoriteListRequest, opts ...client.CallOption) (*VideoFavoriteListResponse, error) {
	req := c.c.NewRequest(c.name, "VideoService.FavoriteList", in)
	out := new(VideoFavoriteListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VideoService service

type VideoServiceHandler interface {
	Feed(context.Context, *VideoFeedRequest, *VideoFeedResponse) error
	PublishAction(context.Context, *VideoPublishActionRequest, *VideoPublishActionResponse) error
	PublishList(context.Context, *VideoPublishListRequest, *VideoPublishListResponse) error
	FavoriteAction(context.Context, *VideoFavoriteActionRequest, *VideoFavoriteActionResponse) error
	FavoriteList(context.Context, *VideoFavoriteListRequest, *VideoFavoriteListResponse) error
}

func RegisterVideoServiceHandler(s server.Server, hdlr VideoServiceHandler, opts ...server.HandlerOption) error {
	type videoService interface {
		Feed(ctx context.Context, in *VideoFeedRequest, out *VideoFeedResponse) error
		PublishAction(ctx context.Context, in *VideoPublishActionRequest, out *VideoPublishActionResponse) error
		PublishList(ctx context.Context, in *VideoPublishListRequest, out *VideoPublishListResponse) error
		FavoriteAction(ctx context.Context, in *VideoFavoriteActionRequest, out *VideoFavoriteActionResponse) error
		FavoriteList(ctx context.Context, in *VideoFavoriteListRequest, out *VideoFavoriteListResponse) error
	}
	type VideoService struct {
		videoService
	}
	h := &videoServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&VideoService{h}, opts...))
}

type videoServiceHandler struct {
	VideoServiceHandler
}

func (h *videoServiceHandler) Feed(ctx context.Context, in *VideoFeedRequest, out *VideoFeedResponse) error {
	return h.VideoServiceHandler.Feed(ctx, in, out)
}

func (h *videoServiceHandler) PublishAction(ctx context.Context, in *VideoPublishActionRequest, out *VideoPublishActionResponse) error {
	return h.VideoServiceHandler.PublishAction(ctx, in, out)
}

func (h *videoServiceHandler) PublishList(ctx context.Context, in *VideoPublishListRequest, out *VideoPublishListResponse) error {
	return h.VideoServiceHandler.PublishList(ctx, in, out)
}

func (h *videoServiceHandler) FavoriteAction(ctx context.Context, in *VideoFavoriteActionRequest, out *VideoFavoriteActionResponse) error {
	return h.VideoServiceHandler.FavoriteAction(ctx, in, out)
}

func (h *videoServiceHandler) FavoriteList(ctx context.Context, in *VideoFavoriteListRequest, out *VideoFavoriteListResponse) error {
	return h.VideoServiceHandler.FavoriteList(ctx, in, out)
}
